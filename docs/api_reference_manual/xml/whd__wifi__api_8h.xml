<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="whd__wifi__api_8h" kind="file" language="C++">
    <compoundname>whd_wifi_api.h</compoundname>
    <includes refid="whd_8h" local="yes">whd.h</includes>
    <includes refid="whd__types_8h" local="yes">whd_types.h</includes>
    <includedby refid="cybsp__wifi_8h" local="yes">cybsp_wifi.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>whd.h</label>
        <link refid="whd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>whd_types.h</label>
        <link refid="whd__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cy_result.h</label>
      </node>
      <node id="6">
        <label>cyhal_hw_types.h</label>
      </node>
      <node id="1">
        <label>whd_wifi_api.h</label>
        <link refid="whd__wifi__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>cybsp_wifi.h</label>
        <link refid="cybsp__wifi_8h"/>
      </node>
      <node id="1">
        <label>whd_wifi_api.h</label>
        <link refid="whd__wifi__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__wifijoin_1ga9f8c6096922212981dd2101a17aec471" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* whd_scan_result_callback_t) (whd_scan_result_t **result_ptr, void *user_data, whd_scan_status_t status)</definition>
        <argsstring>)(whd_scan_result_t **result_ptr, void *user_data, whd_scan_status_t status)</argsstring>
        <name>whd_scan_result_callback_t</name>
        <briefdescription>
<para>Scan result callback function pointer type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pointer that indicates where to put the next scan result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User provided data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of scan process </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="130" column="9" bodyfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wifimanagement_1ga1c8bf41b593cb947266f8690d495f381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_on</definition>
        <argsstring>(whd_driver_t whd_driver, whd_interface_t *ifpp)</argsstring>
        <name>whd_wifi_on</name>
        <param>
          <type><ref refid="whd_8h_1ac45015d82e65db891b463066873eca4f" kindref="member">whd_driver_t</ref></type>
          <declname>whd_driver</declname>
        </param>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref> *</type>
          <declname>ifpp</declname>
        </param>
        <briefdescription>
<para>Turn on the Wi-Fi device. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialise Wi-Fi platform Program various WiFi parameters and modes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>whd_driver</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of the driver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ifpp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if initialization is successful, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="63" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="63" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifimanagement_1ga422587a9b104a871233a42aceb2141d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_off</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_off</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Turn off the Wi-Fi device. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>De-Initialises the required parts of the hardware platform i.e. pins for SDIO/SPI, interrupt, reset, power etc.</para>
</listitem><listitem><para>De-Initialises the whd thread which arbitrates access to the SDIO/SPI bus</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if deinitialization is successful, Error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="78" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="78" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifimanagement_1gab7d6e59874922e5646e08e52082e32f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_deinit</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_deinit</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Shutdown this instance of the wifi driver, freeing all used resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="86" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="86" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifimanagement_1ga925da3b1ed914d7bb661d3cb2af50680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_set_up</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_set_up</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Brings up the Wi-Fi core. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="94" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="94" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifimanagement_1ga412c2d4653a7c36329c6cf78be344336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_set_down</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_set_down</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Bring down the Wi-Fi core. </para>
        </briefdescription>
        <detaileddescription>
<para>WARNING / NOTE: This brings down the Wi-Fi core and existing network connections will be lost.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="105" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="105" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifimanagement_1ga553c009e9f6f856dfe243d745e21bbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_add_secondary_interface</definition>
        <argsstring>(whd_driver_t whd_drv, whd_mac_t *mac_addr, whd_interface_t *ifpp)</argsstring>
        <name>whd_add_secondary_interface</name>
        <param>
          <type><ref refid="whd_8h_1ac45015d82e65db891b463066873eca4f" kindref="member">whd_driver_t</ref></type>
          <declname>whd_drv</declname>
        </param>
        <param>
          <type><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac_addr</declname>
        </param>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref> *</type>
          <declname>ifpp</declname>
        </param>
        <briefdescription>
<para>Creates a secondary interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>whd_drv</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of the driver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>MAC address for the interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ifpp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the whd interface pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="115" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="115" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gaef3dc76f682c6c193df94897e9d0b71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_scan_synch</definition>
        <argsstring>(whd_interface_t ifp, whd_sync_scan_result_t *scan_result, uint32_t count)</argsstring>
        <name>whd_wifi_scan_synch</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__sync__scan__result__t" kindref="compound">whd_sync_scan_result_t</ref> *</type>
          <declname>scan_result</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Initiates a scan to search for 802.11 networks. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions returns the scan results with limited sets of parameter in a buffer provided by the caller. It is also a blocking call. It is an simplified version of the <ref refid="group__wifijoin_1ga82d8c980d15acf0e6e18b56423f4e52b" kindref="member">whd_wifi_scan()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scan_result</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to user requested records buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>No of records user is interested in. If 0 return the total record count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>When scanning specific channels, devices with a strong signal strength on nearby channels may be detected</para>
</simplesect>
<simplesect kind="return"><para>record count or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="146" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="146" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1ga82d8c980d15acf0e6e18b56423f4e52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_scan</definition>
        <argsstring>(whd_interface_t ifp, whd_scan_type_t scan_type, whd_bss_type_t bss_type, const whd_ssid_t *optional_ssid, const whd_mac_t *optional_mac, const uint16_t *optional_channel_list, const whd_scan_extended_params_t *optional_extended_params, whd_scan_result_callback_t callback, whd_scan_result_t *result_ptr, void *user_data)</argsstring>
        <name>whd_wifi_scan</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1af7ac1b0be4ce67f3e82b876c2f27fd3a" kindref="member">whd_scan_type_t</ref></type>
          <declname>scan_type</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a3070614a06a8989b9eb207e9f1286c5f" kindref="member">whd_bss_type_t</ref></type>
          <declname>bss_type</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref> *</type>
          <declname>optional_ssid</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>optional_mac</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>optional_channel_list</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__scan__extended__params__t" kindref="compound">whd_scan_extended_params_t</ref> *</type>
          <declname>optional_extended_params</declname>
        </param>
        <param>
          <type><ref refid="group__wifijoin_1ga9f8c6096922212981dd2101a17aec471" kindref="member">whd_scan_result_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="structwhd__scan__result__t" kindref="compound">whd_scan_result_t</ref> *</type>
          <declname>result_ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Initiates a scan to search for 802.11 networks. </para>
        </briefdescription>
        <detaileddescription>
<para>The scan progressively accumulates results over time, and may take between 1 and 10 seconds to complete. The results of the scan will be individually provided to the callback function. Note: The callback function will be executed in the context of the WHD thread and so must not perform any actions that may cause a bus transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scan_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the scan should be Active, Passive or scan Prohibited channels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bss_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the scan should search for Infrastructure networks (those using an Access Point), Ad-hoc networks, or both types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks using the specified SSID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_mac</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks where the BSSID (MAC address of the Access Point) matches the specified MAC address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_channel_list</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks on the specified channels - array of channel numbers to search, terminated with a zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_extended_params</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will obey the specifications about dwell times and number of probes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function which will receive and process the result data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer to a result storage structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user specific data that will be passed directly to the callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>- When scanning specific channels, devices with a strong signal strength on nearby channels may be detected<itemizedlist>
<listitem><para>Callback must not use blocking functions, nor use WHD functions, since it is called from the context of the WHD thread.</para>
</listitem><listitem><para>The callback, result_ptr and user_data variables will be referenced after the function returns. Those variables must remain valid until the scan is complete.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="181" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="181" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gacf8632bb68cef4d831083a66bee7b8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_stop_scan</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_stop_scan</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Abort a previously issued scan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="198" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="198" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gac767814ae445f735b51686db20c780be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_join</definition>
        <argsstring>(whd_interface_t ifp, const whd_ssid_t *ssid, whd_security_t auth_type, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>whd_wifi_join</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref> *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref></type>
          <declname>auth_type</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Joins a Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para>Scans for, associates and authenticates with a Wi-Fi network. On successful return, the system is ready to send data packets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>A null terminated string containing the SSID name of the network to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte array containing either the cleartext security key for WPA/WPA2/WPA3 secured networks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the security_key in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>In case of WPA3/WPA2 transition mode, the security_key value is WPA3 password.</para>
</simplesect>
<simplesect kind="return"><para>WHD_SUCCESS when the system is joined and ready to send data packets Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="216" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="216" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gae41c4ab0b2f3ecc433a6c4e89238b066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_join_specific</definition>
        <argsstring>(whd_interface_t ifp, const whd_scan_result_t *ap, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>whd_wifi_join_specific</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__scan__result__t" kindref="compound">whd_scan_result_t</ref> *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Joins a specific Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para>Associates and authenticates with a specific Wi-Fi access point. On successful return, the system is ready to send data packets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structwhd__scan__result__t" kindref="compound">whd_scan_result_t</ref> structure containing AP details and set ap.channel to 0 for unspecificed channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte array containing either the cleartext security key for WPA/WPA2 secured networks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the security_key in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the system is joined and ready to send data packets Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="234" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="234" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaf82eda2ff9979b1bc053a6d7f1f4b125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_rssi</definition>
        <argsstring>(whd_interface_t ifp, int32_t *rssi)</argsstring>
        <name>whd_wifi_get_rssi</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>rssi</declname>
        </param>
        <briefdescription>
<para>Retrieve the latest RSSI value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rssi</parametername>
</parameternamelist>
<parameterdescription>
<para>The location where the RSSI value will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the RSSI was successfully retrieved Error code if the RSSI was not retrieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="253" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="253" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1ga95c40af4be45d119b737c0113d9a038e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_ap_info</definition>
        <argsstring>(whd_interface_t ifp, whd_bss_info_t *ap_info, whd_security_t *security)</argsstring>
        <name>whd_wifi_get_ap_info</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_bss_info_t *</type>
          <declname>ap_info</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref> *</type>
          <declname>security</declname>
        </param>
        <briefdescription>
<para>Retrieves AP information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns a whd_bss_info_t structure containing AP details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the AP info was successfully retrieved Error code if the AP info was not successfully retrieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="273" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="273" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1ga971ed7d8e459c715aa9bf3c52b563d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_leave</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_leave</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Disassociates from a Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para>Applicable only for STA role</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS On successful disassociation from the AP Error code If an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="291" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="291" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga8a634822973adc75a61a05eb2b664ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_mac_address</definition>
        <argsstring>(whd_interface_t ifp, whd_mac_t *mac)</argsstring>
        <name>whd_wifi_get_mac_address</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Retrieves the current Media Access Control (MAC) address (or Ethernet hardware address) of the 802.11 device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable that the current MAC address will be written to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="308" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="308" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga52d3190589758d9fd36a7b27a9d08f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_bssid</definition>
        <argsstring>(whd_interface_t ifp, whd_mac_t *bssid)</argsstring>
        <name>whd_wifi_get_bssid</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>bssid</declname>
        </param>
        <briefdescription>
<para>Get the BSSID of the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the whd_interface_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bssid</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the BSSID address (mac address) if associated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="317" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="317" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1ga647aebc1d86708017fd11029e2e1a51c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_init_ap</definition>
        <argsstring>(whd_interface_t ifp, whd_ssid_t *ssid, whd_security_t auth_type, const uint8_t *security_key, uint8_t key_length, uint8_t channel)</argsstring>
        <name>whd_wifi_init_ap</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref> *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref></type>
          <declname>auth_type</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Initialises an infrastructure WiFi network (SoftAP) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>A null terminated string containing the SSID name of the network to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte array containing the cleartext security key for the network </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the security_key in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>802.11 channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if successfully initialises an AP Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="338" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="338" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1ga3c9aa99add3f6a6d13e9092bd6e1246b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_start_ap</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_start_ap</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Start the infrastructure WiFi network (SoftAP) using the parameter set by <ref refid="group__wifisoftap_1ga647aebc1d86708017fd11029e2e1a51c" kindref="member">whd_wifi_init_ap()</ref> and optionaly by <ref refid="group__wifiutilities_1gaaf7be7d8099507426f52ecff8f716543" kindref="member">whd_wifi_manage_custom_ie()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>WHD_SUCCESS if successfully creates an AP Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="347" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="347" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1ga2c6c28512678dc57dabb641c41e30d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_stop_ap</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_stop_ap</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Stops an existing infrastructure WiFi network. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the AP is successfully stopped or if the AP has not yet been brought up Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="356" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="356" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1ga32982684d093a173a6e578856b581d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_ap_get_max_assoc</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *max_assoc)</argsstring>
        <name>whd_wifi_ap_get_max_assoc</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>max_assoc</declname>
        </param>
        <briefdescription>
<para>Get the maximum number of associations supported by AP interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_assoc</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of associations supported by Soft AP interfaces.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the maximum number of associated clients was successfully read WHD_ERROR if the maximum number of associated clients was not successfully read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="367" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="367" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1ga9e974ab0fcc24698d01a5abc3e2c1dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_associated_client_list</definition>
        <argsstring>(whd_interface_t ifp, void *client_list_buffer, uint16_t buffer_length)</argsstring>
        <name>whd_wifi_get_associated_client_list</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>client_list_buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
<para>Gets the current number of active connections. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_list_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store list of associated clients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of client list buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the active connections was successfully read WHD_ERROR if the active connections was not successfully read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="378" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="378" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1gad9ad2649c18db8773351a5938e7930e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_deauth_sta</definition>
        <argsstring>(whd_interface_t ifp, whd_mac_t *mac, whd_dot11_reason_code_t reason)</argsstring>
        <name>whd_wifi_deauth_sta</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1ac81b31559ee1db82f01e8acfb8eea55d" kindref="member">whd_dot11_reason_code_t</ref></type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Deauthenticates a STA which may or may not be associated to SoftAP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable containing the MAC address to which the deauthentication will be sent NULL mac address will deauthenticate all the associated STAs</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Deauthentication reason code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS On successful deauthentication of the other STA WHD_ERROR If an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="392" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="392" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1gaf2758fcc1028704d801b16d77b96a345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_ap_set_beacon_interval</definition>
        <argsstring>(whd_interface_t ifp, uint16_t interval)</argsstring>
        <name>whd_wifi_ap_set_beacon_interval</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Set the beacon interval. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the value needs to be set before ap_start in order to beacon interval to take effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Beacon interval in time units (Default: 100 time units = 102.4 ms)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="414" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="414" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifisoftap_1ga57c57ad4d5acf499e90ff8db020fa2d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_ap_set_dtim_interval</definition>
        <argsstring>(whd_interface_t ifp, uint16_t interval)</argsstring>
        <name>whd_wifi_ap_set_dtim_interval</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Set the DTIM interval. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the value needs to be set before ap_start in order to DTIM interval to take effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>DTIM interval, in unit of beacon interval</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="425" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="425" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifipowersave_1ga05cfafe07ad2c208acfdee29f7c6e626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_enable_powersave</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_enable_powersave</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Enables powersave mode on specified interface without regard for throughput reduction. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables (legacy) 802.11 PS-Poll mode and should be used to achieve the lowest power consumption possible when the Wi-Fi device is primarily passively listening to the network</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="445" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="445" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifipowersave_1ga6152d966f454fe8e8836472b802401c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_enable_powersave_with_throughput</definition>
        <argsstring>(whd_interface_t ifp, uint16_t return_to_sleep_delay)</argsstring>
        <name>whd_wifi_enable_powersave_with_throughput</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>return_to_sleep_delay</declname>
        </param>
        <briefdescription>
<para>Enables powersave mode on specified interface while attempting to maximise throughput. </para>
        </briefdescription>
        <detaileddescription>
<para>Network traffic is typically bursty. Reception of a packet often means that another packet will be received shortly afterwards (and vice versa for transmit).</para>
<para>In high throughput powersave mode, rather then entering powersave mode immediately after receiving or sending a packet, the WLAN chip waits for a timeout period before returning to sleep.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_to_sleep_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to set return to sleep delay. return to sleep delay must be set to a multiple of 10 and not equal to zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if power save mode was successfully enabled Error code if power save mode was not successfully enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="465" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="465" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifipowersave_1ga3eed267d42020440a077d7649cde0567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_powersave_mode</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *value)</argsstring>
        <name>whd_wifi_get_powersave_mode</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get powersave mode on specified interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the current powersave state PM1_POWERSAVE_MODE, PM2_POWERSAVE_MODE, NO_POWERSAVE_MODE</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="475" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="475" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifipowersave_1gab9af7ef8dac544f2bb8871259f85c437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_disable_powersave</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_disable_powersave</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Disables 802.11 power save mode on specified interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if power save mode was successfully disabled Error code if power save mode was not successfully disabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="485" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="485" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gab36ff07aa1d825c0366c82ce003dd9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_register_multicast_address</definition>
        <argsstring>(whd_interface_t ifp, const whd_mac_t *mac)</argsstring>
        <name>whd_wifi_register_multicast_address</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Registers interest in a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para>Once a multicast address has been registered, all packets detected on the medium destined for that address are forwarded to the host. Otherwise they are ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet MAC address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the address was registered successfully Error code if the address was not registered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="505" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="505" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gad092a543b73e91c7090875ccb940e01f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_unregister_multicast_address</definition>
        <argsstring>(whd_interface_t ifp, const whd_mac_t *mac)</argsstring>
        <name>whd_wifi_unregister_multicast_address</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Unregisters interest in a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para>Once a multicast address has been unregistered, all packets detected on the medium destined for that address are ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet MAC address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the address was unregistered successfully Error code if the address was not unregistered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="518" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="518" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga07144bbc68755481708752962538ee6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_is_ready_to_transceive</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_is_ready_to_transceive</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Determines if a particular interface is ready to transceive ethernet packets. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the interface is ready to transceive ethernet packets WHD_NOTFOUND no AP with a matching SSID was found WHD_NOT_AUTHENTICATED Matching AP was found but it won&apos;t let you authenticate. This can occur if this device is in the block list on the AP. WHD_NOT_KEYED Device has authenticated and associated but has not completed the key exchange. This can occur if the passphrase is incorrect. Error code if the interface is not ready to transceive ethernet packets </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="532" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="532" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaaf7be7d8099507426f52ecff8f716543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_manage_custom_ie</definition>
        <argsstring>(whd_interface_t ifp, whd_custom_ie_action_t action, const uint8_t *oui, uint8_t subtype, const void *data, uint16_t length, uint16_t which_packets)</argsstring>
        <name>whd_wifi_manage_custom_ie</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a8be1026494a86f0ceeebb2dcbf092cbd" kindref="member">whd_custom_ie_action_t</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>oui</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subtype</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>which_packets</declname>
        </param>
        <briefdescription>
<para>Manage the addition and removal of custom IEs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to take (add or remove IE) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oui</parametername>
</parameternamelist>
<parameterdescription>
<para>the oui of the custom IE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the IE sub-type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the buffer that hold the custom IE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the buffer pointed to by &apos;data&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_packets</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask to indicate in which all packets this IE should be included. See whd_ie_packet_flag_t.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the custom IE action was successful Error code if the custom IE action failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="549" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="549" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiioctl_1gad54ac84589a14cc97429bf138fa32639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_set_ioctl_value</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ioctl, uint32_t value)</argsstring>
        <name>whd_wifi_set_ioctl_value</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ioctl</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sends an IOCTL command - CDC_SET IOCTL value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ioctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CDC_SET - To set the I/O control </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Data value to be sent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="568" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="568" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiioctl_1ga817655c1372b8c87608b204105f06937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_ioctl_value</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ioctl, uint32_t *value)</argsstring>
        <name>whd_wifi_get_ioctl_value</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ioctl</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sends an IOCTL command - CDC_GET IOCTL value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ioctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CDC_GET - To get the I/O control </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive the data value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="578" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="578" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiioctl_1ga5d7aec7622caacf4a0642cf1da1fa647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_set_ioctl_buffer</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ioctl, void *buffer, uint16_t buffer_length)</argsstring>
        <name>whd_wifi_set_ioctl_buffer</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ioctl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
<para>Sends an IOCTL command - CDC_SET IOCTL buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ioctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CDC_SET - To set the I/O control </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle for a packet buffer containing the data value to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="589" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="589" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiioctl_1gab1a4c2ae9163408ae92b3f292ee2807f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_ioctl_buffer</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ioctl, uint8_t *out_buffer, uint16_t out_length)</argsstring>
        <name>whd_wifi_get_ioctl_buffer</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ioctl</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>out_buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>out_length</declname>
        </param>
        <briefdescription>
<para>Sends an IOCTL command - CDC_GET IOCTL buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ioctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CDC_GET - To get the I/O control </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive the handle for the packet buffer containing the response data value received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of out_buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="600" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="600" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg_1gab4a8c97085b18321d8d682b1578edf7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_get_bss_info</definition>
        <argsstring>(whd_interface_t ifp, wl_bss_info_t *bi)</argsstring>
        <name>whd_wifi_get_bss_info</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwl__bss__info__t" kindref="compound">wl_bss_info_t</ref> *</type>
          <declname>bi</declname>
        </param>
        <briefdescription>
<para>Retrives the bss info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bi</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the structure <ref refid="structwl__bss__info__t" kindref="compound">wl_bss_info_t</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" line="619" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h" declline="619" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Prototypes of functions for controlling the Wi-Fi system</para>
<para>This file provides prototypes for end-user functions which allow actions such as scanning for Wi-Fi networks, joining Wi-Fi networks, getting the MAC address, etc </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2020<sp/>Cypress<sp/>Semiconductor<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="whd_8h" kindref="compound">whd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="whd__types_8h" kindref="compound">whd_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_WHD_WIFI_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_WHD_WIFI_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/******************************************************</highlight></codeline>
<codeline lineno="39"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>declarations</highlight></codeline>
<codeline lineno="40"><highlight class="comment">******************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifimanagement_1ga1c8bf41b593cb947266f8690d495f381" kindref="member">whd_wifi_on</ref>(<ref refid="whd_8h_1ac45015d82e65db891b463066873eca4f" kindref="member">whd_driver_t</ref><sp/>whd_driver,<sp/><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>*ifpp);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifimanagement_1ga422587a9b104a871233a42aceb2141d2" kindref="member">whd_wifi_off</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifimanagement_1gab7d6e59874922e5646e08e52082e32f5" kindref="member">whd_deinit</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifimanagement_1ga925da3b1ed914d7bb661d3cb2af50680" kindref="member">whd_wifi_set_up</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifimanagement_1ga412c2d4653a7c36329c6cf78be344336" kindref="member">whd_wifi_set_down</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifimanagement_1ga553c009e9f6f856dfe243d745e21bbf9" kindref="member">whd_add_secondary_interface</ref>(<ref refid="whd_8h_1ac45015d82e65db891b463066873eca4f" kindref="member">whd_driver_t</ref><sp/>whd_drv,<sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref><sp/>*mac_addr,<sp/><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>*ifpp);</highlight></codeline>
<codeline lineno="131"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__wifijoin_1ga9f8c6096922212981dd2101a17aec471" kindref="member">whd_scan_result_callback_t</ref>)(<ref refid="structwhd__scan__result__t" kindref="compound">whd_scan_result_t</ref><sp/>**result_ptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data,<sp/><ref refid="whd__types_8h_1a34d5a5749a0bcc00b7249108a8670ada" kindref="member">whd_scan_status_t</ref><sp/>status);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifijoin_1gaef3dc76f682c6c193df94897e9d0b71f" kindref="member">whd_wifi_scan_synch</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwhd__sync__scan__result__t" kindref="compound">whd_sync_scan_result_t</ref><sp/>*scan_result,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>count</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifijoin_1ga82d8c980d15acf0e6e18b56423f4e52b" kindref="member">whd_wifi_scan</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="whd__types_8h_1af7ac1b0be4ce67f3e82b876c2f27fd3a" kindref="member">whd_scan_type_t</ref><sp/>scan_type,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="whd__types_8h_1a3070614a06a8989b9eb207e9f1286c5f" kindref="member">whd_bss_type_t</ref><sp/>bss_type,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref><sp/>*optional_ssid,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref><sp/>*optional_mac,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*optional_channel_list,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwhd__scan__extended__params__t" kindref="compound">whd_scan_extended_params_t</ref><sp/>*optional_extended_params,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__wifijoin_1ga9f8c6096922212981dd2101a17aec471" kindref="member">whd_scan_result_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwhd__scan__result__t" kindref="compound">whd_scan_result_t</ref><sp/>*result_ptr,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifijoin_1gacf8632bb68cef4d831083a66bee7b8fa" kindref="member">whd_wifi_stop_scan</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifijoin_1gac767814ae445f735b51686db20c780be" kindref="member">whd_wifi_join</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref><sp/>*ssid,<sp/><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref><sp/>auth_type,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*security_key,<sp/>uint8_t<sp/>key_length);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifijoin_1gae41c4ab0b2f3ecc433a6c4e89238b066" kindref="member">whd_wifi_join_specific</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwhd__scan__result__t" kindref="compound">whd_scan_result_t</ref><sp/>*ap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*security_key,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>key_length);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiutilities_1gaf82eda2ff9979b1bc053a6d7f1f4b125" kindref="member">whd_wifi_get_rssi</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>int32_t<sp/>*rssi);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga95c40af4be45d119b737c0113d9a038e" kindref="member">whd_wifi_get_ap_info</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>whd_bss_info_t<sp/>*ap_info,<sp/><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref><sp/>*security);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifijoin_1ga971ed7d8e459c715aa9bf3c52b563d8b" kindref="member">whd_wifi_leave</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="309"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiutilities_1ga8a634822973adc75a61a05eb2b664ef5" kindref="member">whd_wifi_get_mac_address</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref><sp/>*mac);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiutilities_1ga52d3190589758d9fd36a7b27a9d08f28" kindref="member">whd_wifi_get_bssid</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref><sp/>*bssid);</highlight></codeline>
<codeline lineno="339"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga647aebc1d86708017fd11029e2e1a51c" kindref="member">whd_wifi_init_ap</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/><ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref><sp/>*ssid,<sp/><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref><sp/>auth_type,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*security_key,<sp/>uint8_t<sp/>key_length,<sp/>uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga3c9aa99add3f6a6d13e9092bd6e1246b" kindref="member">whd_wifi_start_ap</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga2c6c28512678dc57dabb641c41e30d41" kindref="member">whd_wifi_stop_ap</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga32982684d093a173a6e578856b581d29" kindref="member">whd_wifi_ap_get_max_assoc</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint32_t<sp/>*max_assoc);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga9e974ab0fcc24698d01a5abc3e2c1dbb" kindref="member">whd_wifi_get_associated_client_list</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*client_list_buffer,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>buffer_length);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1gad9ad2649c18db8773351a5938e7930e4" kindref="member">whd_wifi_deauth_sta</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref><sp/>*mac,<sp/><ref refid="whd__types_8h_1ac81b31559ee1db82f01e8acfb8eea55d" kindref="member">whd_dot11_reason_code_t</ref><sp/>reason);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga95c40af4be45d119b737c0113d9a038e" kindref="member">whd_wifi_get_ap_info</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>whd_bss_info_t<sp/>*ap_info,<sp/><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref><sp/>*security);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1gaf2758fcc1028704d801b16d77b96a345" kindref="member">whd_wifi_ap_set_beacon_interval</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint16_t<sp/>interval);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifisoftap_1ga57c57ad4d5acf499e90ff8db020fa2d9" kindref="member">whd_wifi_ap_set_dtim_interval</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint16_t<sp/>interval);</highlight></codeline>
<codeline lineno="446"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifipowersave_1ga05cfafe07ad2c208acfdee29f7c6e626" kindref="member">whd_wifi_enable_powersave</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifipowersave_1ga6152d966f454fe8e8836472b802401c3" kindref="member">whd_wifi_enable_powersave_with_throughput</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint16_t<sp/>return_to_sleep_delay);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifipowersave_1ga3eed267d42020440a077d7649cde0567" kindref="member">whd_wifi_get_powersave_mode</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint32_t<sp/>*value);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifipowersave_1gab9af7ef8dac544f2bb8871259f85c437" kindref="member">whd_wifi_disable_powersave</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="506"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiutilities_1gab36ff07aa1d825c0366c82ce003dd9f6" kindref="member">whd_wifi_register_multicast_address</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref><sp/>*mac);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiutilities_1gad092a543b73e91c7090875ccb940e01f" kindref="member">whd_wifi_unregister_multicast_address</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref><sp/>*mac);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiutilities_1ga07144bbc68755481708752962538ee6f" kindref="member">whd_wifi_is_ready_to_transceive</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Action<sp/>Frames<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiutilities_1gaaf7be7d8099507426f52ecff8f716543" kindref="member">whd_wifi_manage_custom_ie</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/><ref refid="whd__types_8h_1a8be1026494a86f0ceeebb2dcbf092cbd" kindref="member">whd_custom_ie_action_t</ref><sp/>action,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*oui,<sp/>uint8_t<sp/>subtype,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>length,<sp/>uint16_t<sp/>which_packets);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiioctl_1gad54ac84589a14cc97429bf138fa32639" kindref="member">whd_wifi_set_ioctl_value</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint32_t<sp/>ioctl,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiioctl_1ga817655c1372b8c87608b204105f06937" kindref="member">whd_wifi_get_ioctl_value</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint32_t<sp/>ioctl,<sp/>uint32_t<sp/>*value);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiioctl_1ga5d7aec7622caacf4a0642cf1da1fa647" kindref="member">whd_wifi_set_ioctl_buffer</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint32_t<sp/>ioctl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/>uint16_t<sp/>buffer_length);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifiioctl_1gab1a4c2ae9163408ae92b3f292ee2807f" kindref="member">whd_wifi_get_ioctl_buffer</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/>uint32_t<sp/>ioctl,<sp/>uint8_t<sp/>*out_buffer,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>out_length);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__dbg_1gab4a8c97085b18321d8d682b1578edf7d" kindref="member">whd_wifi_get_bss_info</ref>(<ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref><sp/>ifp,<sp/><ref refid="structwl__bss__info__t" kindref="compound">wl_bss_info_t</ref><sp/>*bi);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifndef<sp/>INCLUDED_WHD_WIFI_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/whd_wifi_api.h"/>
  </compounddef>
</doxygen>
