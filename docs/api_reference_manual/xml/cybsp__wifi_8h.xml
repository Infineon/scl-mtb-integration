<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="cybsp__wifi_8h" kind="file" language="C++">
    <compoundname>cybsp_wifi.h</compoundname>
    <includes local="yes">cy_result.h</includes>
    <includes refid="whd__wifi__api_8h" local="yes">whd_wifi_api.h</includes>
    <incdepgraph>
      <node id="1">
        <label>cybsp_wifi.h</label>
        <link refid="cybsp__wifi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>whd.h</label>
        <link refid="whd_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>whd_types.h</label>
        <link refid="whd__types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>whd_wifi_api.h</label>
        <link refid="whd__wifi__api_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cy_result.h</label>
      </node>
      <node id="7">
        <label>cybsp.h</label>
      </node>
      <node id="8">
        <label>cyhal_hw_types.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__bsp__wifi_1ga1ddf3533adfa2e8f298f7edab7a8fa0c" prot="public" static="no">
        <name>CYBSP_RSLT_WIFI_INIT_FAILED</name>
        <initializer>(CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_LIB_WHD_INTEGRATION, 0))</initializer>
        <briefdescription>
<para>Initialization of the WiFi driver failed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/cybsp_wifi.h" line="43" column="9" bodyfile="source/cybsp_wifi.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__bsp__wifi_1gab868840379127847a984d02327620dd4" prot="public" static="no">
        <name>CYBSP_RSLT_WIFI_SDIO_ENUM_TIMEOUT</name>
        <initializer>(CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_LIB_WHD_INTEGRATION, 1))</initializer>
        <briefdescription>
<para>SDIO enumeration failed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/cybsp_wifi.h" line="46" column="9" bodyfile="source/cybsp_wifi.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__bsp__wifi_1ga24ad5371221b9b7690a5470add6f0e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_rslt_t</type>
        <definition>cy_rslt_t cybsp_wifi_init_primary</definition>
        <argsstring>(whd_interface_t *interface)</argsstring>
        <name>cybsp_wifi_init_primary</name>
        <param>
          <type>whd_interface_t *</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
<para>Initializes the primary interface for the WiFi driver on the board. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does the following:<linebreak/>
 1) Initializes the WiFi driver.<linebreak/>
 2) Turns on the WiFi chip.</para>
<para><simplesect kind="note"><para>This function cannot be called multiple times. If the interface needs to be reinitialized, <ref refid="group__group__bsp__wifi_1ga77555750b014230bd78143aefb9f379b" kindref="member">cybsp_wifi_deinit</ref> must be called before calling this function again.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to be initialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CY_RSLT_SUCCESS for successful initialization or error if initialization failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/cybsp_wifi.h" line="59" column="11" declfile="source/cybsp_wifi.h" declline="59" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__group__bsp__wifi_1ga13b5648cec341b96068e2b372388eea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_rslt_t</type>
        <definition>cy_rslt_t cybsp_wifi_init_secondary</definition>
        <argsstring>(whd_interface_t *interface, whd_mac_t *mac_address)</argsstring>
        <name>cybsp_wifi_init_secondary</name>
        <param>
          <type>whd_interface_t *</type>
          <declname>interface</declname>
        </param>
        <param>
          <type><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac_address</declname>
        </param>
        <briefdescription>
<para>This function initializes and adds a secondary interface to the WiFi driver. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function does not initialize the WiFi driver or turn on the WiFi chip. That is required to be done by first calling <ref refid="group__group__bsp__wifi_1ga24ad5371221b9b7690a5470add6f0e3f" kindref="member">cybsp_wifi_init_primary</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to be initialized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mac_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Mac address for secondary interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CY_RSLT_SUCCESS for successful initialization or error if initialization failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/cybsp_wifi.h" line="69" column="11" declfile="source/cybsp_wifi.h" declline="69" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__group__bsp__wifi_1ga77555750b014230bd78143aefb9f379b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_rslt_t</type>
        <definition>cy_rslt_t cybsp_wifi_deinit</definition>
        <argsstring>(whd_interface_t interface)</argsstring>
        <name>cybsp_wifi_deinit</name>
        <param>
          <type>whd_interface_t</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
<para>De-initializes all WiFi interfaces and the WiFi driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does the following:<linebreak/>
 1) Deinitializes all WiFi interfaces and WiFi driver.<linebreak/>
 2) Turns off the WiFi chip.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to be de-initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CY_RSLT_SUCCESS for successful de-initialization or error if de-initialization failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/cybsp_wifi.h" line="79" column="11" declfile="source/cybsp_wifi.h" declline="79" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__group__bsp__wifi_1ga9f2fb2176d21e958727a75821b346e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>whd_driver_t</type>
        <definition>whd_driver_t cybsp_get_wifi_driver</definition>
        <argsstring>(void)</argsstring>
        <name>cybsp_get_wifi_driver</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the wifi driver instance initialized by the driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This should only be called after being initialized by <ref refid="group__group__bsp__wifi_1ga24ad5371221b9b7690a5470add6f0e3f" kindref="member">cybsp_wifi_init_primary()</ref> and before being deinitialized by <ref refid="group__group__bsp__wifi_1ga77555750b014230bd78143aefb9f379b" kindref="member">cybsp_wifi_deinit()</ref>. This is also the only time where the driver reference is valid.</para>
<para><simplesect kind="return"><para>Wifi driver instance pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/cybsp_wifi.h" line="88" column="14" declfile="source/cybsp_wifi.h" declline="88" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic abstraction layer for dealing with boards containing a Cypress MCU. </para>
    </briefdescription>
    <detaileddescription>
<para>This API provides convenience methods for initializing and manipulating different hardware found on the board.</para>
<para><simplesect kind="copyright"><para>Copyright 2018-2020 Cypress Semiconductor Corporation SPDX-License-Identifier: Apache-2.0</para>
</simplesect>
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at <verbatim>http://www.apache.org/licenses/LICENSE-2.0
</verbatim> Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cy_result.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="whd__wifi__api_8h" kindref="compound">whd_wifi_api.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYBSP_RSLT_WIFI_INIT_FAILED<sp/>(CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR,<sp/>CY_RSLT_MODULE_BOARD_LIB_WHD_INTEGRATION,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYBSP_RSLT_WIFI_SDIO_ENUM_TIMEOUT<sp/>(CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR,<sp/>CY_RSLT_MODULE_BOARD_LIB_WHD_INTEGRATION,<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">cy_rslt_t<sp/><ref refid="group__group__bsp__wifi_1ga24ad5371221b9b7690a5470add6f0e3f" kindref="member">cybsp_wifi_init_primary</ref>(whd_interface_t*<sp/>interface);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">cy_rslt_t<sp/><ref refid="group__group__bsp__wifi_1ga13b5648cec341b96068e2b372388eea4" kindref="member">cybsp_wifi_init_secondary</ref>(whd_interface_t*<sp/>interface,<sp/><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref>*<sp/>mac_address);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">cy_rslt_t<sp/><ref refid="group__group__bsp__wifi_1ga77555750b014230bd78143aefb9f379b" kindref="member">cybsp_wifi_deinit</ref>(whd_interface_t<sp/>interface);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">whd_driver_t<sp/><ref refid="group__group__bsp__wifi_1ga9f2fb2176d21e958727a75821b346e47" kindref="member">cybsp_get_wifi_driver</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="source/cybsp_wifi.h"/>
  </compounddef>
</doxygen>
