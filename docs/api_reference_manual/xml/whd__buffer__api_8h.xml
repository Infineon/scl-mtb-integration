<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="whd__buffer__api_8h" kind="file" language="C++">
    <compoundname>whd_buffer_api.h</compoundname>
    <includes refid="whd_8h" local="yes">whd.h</includes>
    <includes refid="whd__int_8h" local="yes">whd_int.h</includes>
    <includes refid="whd__network__types_8h" local="yes">whd_network_types.h</includes>
    <incdepgraph>
      <node id="2">
        <label>whd.h</label>
        <link refid="whd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>whd_buffer_api.h</label>
        <link refid="whd__buffer__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>whd_int.h</label>
        <link refid="whd__int_8h"/>
      </node>
      <node id="9">
        <label>whd_network_types.h</label>
        <link refid="whd__network__types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>whd_types.h</label>
        <link refid="whd__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cy_result.h</label>
      </node>
      <node id="5">
        <label>cybsp.h</label>
      </node>
      <node id="7">
        <label>cyhal_hw_types.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="whd__buffer__api_8h_1a3e78892f8fcf0a9381564bdb31becb97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_host_buffer_get</definition>
        <argsstring>(whd_driver_t whd_driver, whd_buffer_t *buffer, whd_buffer_dir_t direction, uint16_t size, uint32_t wait)</argsstring>
        <name>whd_host_buffer_get</name>
        <param>
          <type>whd_driver_t</type>
          <declname>whd_driver</declname>
        </param>
        <param>
          <type>whd_buffer_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group__buffif_1ga44a64c51498b204ceef5555209e29452" kindref="member">whd_buffer_dir_t</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wait</declname>
        </param>
        <briefdescription>
<para>Allocates a packet buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented in the port layer interface which is specific to the buffering scheme in use. Attempts to allocate a packet buffer of the size requested. It can do this by allocating a pre-existing packet from a pool, using a static buffer, or by dynamically allocating memory. The method of allocation does not concern WHD, however it must match the way the network stack expects packet buffers to be allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: A pointer which receives the allocated packet buffer handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>: Indicates transmit/receive direction that the packet buffer is used for. This may be needed if tx/rx pools are separate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The number of bytes to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>: Whether to wait for a packet buffer to be available</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: WHD_SUCCESS or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/whd_buffer_api.h" line="62" column="14" declfile="source/whd_buffer_api.h" declline="62" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="whd__buffer__api_8h_1ae2163fc73e0a65f5adf45740e4c53af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_buffer_release</definition>
        <argsstring>(whd_driver_t whd_driver, whd_buffer_t buffer, whd_buffer_dir_t direction)</argsstring>
        <name>whd_buffer_release</name>
        <param>
          <type>whd_driver_t</type>
          <declname>whd_driver</declname>
        </param>
        <param>
          <type>whd_buffer_t</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group__buffif_1ga44a64c51498b204ceef5555209e29452" kindref="member">whd_buffer_dir_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Releases a packet buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented in the port layer interface, which will be specific to the buffering scheme in use. This function is used by WHD to indicate that it no longer requires a packet buffer. The buffer can then be released back into a pool for reuse, or the dynamically allocated memory can be freed, according to how the packet was allocated. Returns void since WHD cannot do anything about failures</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: The handle of the packet buffer to be released </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>: Indicates transmit/receive direction that the packet buffer has been used for. This might be needed if tx/rx pools are separate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/whd_buffer_api.h" line="80" column="14" declfile="source/whd_buffer_api.h" declline="80" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="whd__buffer__api_8h_1abef2a8bf9afd87fea8515c1593573047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * whd_buffer_get_current_piece_data_pointer</definition>
        <argsstring>(whd_driver_t whd_driver, whd_buffer_t buffer)</argsstring>
        <name>whd_buffer_get_current_piece_data_pointer</name>
        <param>
          <type>whd_driver_t</type>
          <declname>whd_driver</declname>
        </param>
        <param>
          <type>whd_buffer_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Retrieves the current pointer of a packet buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented in the port layer interface which is specific to the buffering scheme in use. Since packet buffers usually need to be created with space at the front for additional headers, this function allows WHD to get the current &apos;front&apos; location pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: The handle of the packet buffer whose pointer is to be retrieved</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: The packet buffer&apos;s current pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/whd_buffer_api.h" line="94" column="9" declfile="source/whd_buffer_api.h" declline="94" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="whd__buffer__api_8h_1a3c367388350208448e0457a02bb9d2d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t whd_buffer_get_current_piece_size</definition>
        <argsstring>(whd_driver_t whd_driver, whd_buffer_t buffer)</argsstring>
        <name>whd_buffer_get_current_piece_size</name>
        <param>
          <type>whd_driver_t</type>
          <declname>whd_driver</declname>
        </param>
        <param>
          <type>whd_buffer_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Retrieves the size of a packet buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented in the port layer interface which is specific to the buffering scheme in use. Since packet buffers usually need to be created with space at the front for additional headers, the memory block used to contain a packet buffer will often be larger than the current size of the packet buffer data. This function allows WHD to retrieve the current size of a packet buffer&apos;s data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: The handle of the packet buffer whose size is to be retrieved</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: The size of the packet buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/whd_buffer_api.h" line="109" column="10" declfile="source/whd_buffer_api.h" declline="109" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="whd__buffer__api_8h_1a62a8f74da1010348a9aad454ee7f7282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_buffer_set_size</definition>
        <argsstring>(whd_driver_t whd_driver, whd_buffer_t buffer, uint16_t size)</argsstring>
        <name>whd_buffer_set_size</name>
        <param>
          <type>whd_driver_t</type>
          <declname>whd_driver</declname>
        </param>
        <param>
          <type>whd_buffer_t</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the current size of a WHD packet. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented in the port layer interface which is specific to the buffering scheme in use. This function sets the current length of a WHD packet buffer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: The packet to be modified </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The new size of the packet buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: WHD_SUCCESS or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/whd_buffer_api.h" line="123" column="14" declfile="source/whd_buffer_api.h" declline="123" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="whd__buffer__api_8h_1a45dc5501b0977a99ebc544801bd966fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_buffer_add_remove_at_front</definition>
        <argsstring>(whd_driver_t whd_driver, whd_buffer_t *buffer, int32_t add_remove_amount)</argsstring>
        <name>whd_buffer_add_remove_at_front</name>
        <param>
          <type>whd_driver_t</type>
          <declname>whd_driver</declname>
        </param>
        <param>
          <type>whd_buffer_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>add_remove_amount</declname>
        </param>
        <briefdescription>
<para>Moves the current pointer of a packet buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented in the port layer interface which is specific to the buffering scheme in use.</para>
<para>Since packet buffers usually need to be created with space at the front for additional headers, this function allows WHD to move the current &apos;front&apos; location pointer so that it has space to add headers to transmit packets, and so that the network stack does not see the internal WHD headers on received packets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: A pointer to the handle of the current packet buffer for which the current pointer will be moved. On return this may contain a pointer to a newly allocated packet buffer which has been daisy chained to the front of the given one. This would be the case if the given packet buffer didn&apos;t have enough space at the front. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_remove_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>: This is the number of bytes to move the current pointer of the packet buffer - a negative value increases the space for headers at the front of the packet, a positive value decreases the space.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: WHD_SUCCESS or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/whd_buffer_api.h" line="145" column="14" declfile="source/whd_buffer_api.h" declline="145" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides prototypes / declarations for common APSTA functionality. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2020<sp/>Cypress<sp/>Semiconductor<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WHD_INTERNAL_BUFFER_API_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_WHD_INTERNAL_BUFFER_API_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="whd_8h" kindref="compound">whd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="whd__int_8h" kindref="compound">whd_int.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="whd__network__types_8h" kindref="compound">whd_network_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/******************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Macros</highlight></codeline>
<codeline lineno="34"><highlight class="comment">******************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/******************************************************</highlight></codeline>
<codeline lineno="37"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Structures</highlight></codeline>
<codeline lineno="38"><highlight class="comment">******************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/******************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>prototypes</highlight></codeline>
<codeline lineno="42"><highlight class="comment">******************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref><sp/><ref refid="whd__buffer__api_8h_1a3e78892f8fcf0a9381564bdb31becb97" kindref="member">whd_host_buffer_get</ref>(whd_driver_t<sp/><ref refid="structwhd__driver" kindref="compound">whd_driver</ref>,<sp/>whd_buffer_t<sp/>*buffer,<sp/><ref refid="group__buffif_1ga44a64c51498b204ceef5555209e29452" kindref="member">whd_buffer_dir_t</ref><sp/>direction,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>size,<sp/>uint32_t<sp/>wait);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref><sp/><ref refid="whd__buffer__api_8h_1ae2163fc73e0a65f5adf45740e4c53af0" kindref="member">whd_buffer_release</ref>(whd_driver_t<sp/><ref refid="structwhd__driver" kindref="compound">whd_driver</ref>,<sp/>whd_buffer_t<sp/>buffer,<sp/><ref refid="group__buffif_1ga44a64c51498b204ceef5555209e29452" kindref="member">whd_buffer_dir_t</ref><sp/>direction);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">uint8_t<sp/>*<ref refid="whd__buffer__api_8h_1abef2a8bf9afd87fea8515c1593573047" kindref="member">whd_buffer_get_current_piece_data_pointer</ref>(whd_driver_t<sp/><ref refid="structwhd__driver" kindref="compound">whd_driver</ref>,<sp/>whd_buffer_t<sp/>buffer);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">uint16_t<sp/><ref refid="whd__buffer__api_8h_1a3c367388350208448e0457a02bb9d2d6" kindref="member">whd_buffer_get_current_piece_size</ref>(whd_driver_t<sp/><ref refid="structwhd__driver" kindref="compound">whd_driver</ref>,<sp/>whd_buffer_t<sp/>buffer);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref><sp/><ref refid="whd__buffer__api_8h_1a62a8f74da1010348a9aad454ee7f7282" kindref="member">whd_buffer_set_size</ref>(whd_driver_t<sp/><ref refid="structwhd__driver" kindref="compound">whd_driver</ref>,<sp/>whd_buffer_t<sp/>buffer,<sp/>uint16_t<sp/>size);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref><sp/><ref refid="whd__buffer__api_8h_1a45dc5501b0977a99ebc544801bd966fb" kindref="member">whd_buffer_add_remove_at_front</ref>(whd_driver_t<sp/><ref refid="structwhd__driver" kindref="compound">whd_driver</ref>,<sp/>whd_buffer_t<sp/>*buffer,<sp/>int32_t<sp/>add_remove_amount);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifndef<sp/>_WHD_INTERNAL_BUFFER_API_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/whd_buffer_api.h"/>
  </compounddef>
</doxygen>
